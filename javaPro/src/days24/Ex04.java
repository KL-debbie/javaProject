package days24;

public class Ex04 {
	
	public static void main(String[] args) {
		
		/*
		 * [ 중첩 클래스 와 중첩 인터페이스]
		 *  1. 클래스와 클래스들 간의 관계
		 *  	has-a관계
		 *  	is-a관계(상속)
		 *  2. 어떤 클래스가 특정 클래스와 관계가 있다면 
		 *  		A				B
		 *  	B 라는 클래스 안(내부)에 A 클래스를 선언한다.
		 *  3. 중첩 클래스(Nested Class) - 클래스 안에 클래스 
		 *  4. 장점
		 *  	1) 두 클래스의 멤버들을 서로 쉽게 접근할 수 있다.
		 *  	2) 불필요한 관계들이 있는 클래스를 감춤으로써 코드의 복잡성을 줄 일 수 있다.
		 *  5.예
		 *  	class A{
		 *  		//필드
		 *  		//메서드
		 *  		//생성자
		 *  		//getter, setter
		 *  
		 *  	// 중첩 클래스
		 *  	class B{
		 *  	}
		 *   
		 *  	// 중첩 인터페이스
		 *   	interface IC{
		 *   	}
		 *   
		 *   }
		 *   
		 *   6. 중첩 클래스의 종류 : 선언된 위치에 따라 구분
		 *   	선언 위치
		 *   	1) 클래스의 멤버로 선언 - 접근지정자 사용 가능
		 *   		(1) 인스턴스 멤버 클래스			: A 객체를 생성해야 B 중첩 클래스를 사용 할 수 있다.
		 *   		(2) 정적(static) 멤버 클래스	: A 클래스로 객체 생성없이 바로 C 중첩클래스를 사용 할 수 있다.
		 *   	
		 *   	중첩 클래스도   A(외부)$B(내부).class  독립적인 클래스파일 생성  
		 *   	
		 *   	2)	특정 메서드의 내부에 선언
		 *   		(3) 로컬 클래스					: 메서드가 실행 될 때에만 사용 할 수 있다.
		 *   
		 *   	A(외부)$1B(로컬클래스명).class
		 *   
		 *   6-2) 예
		 *   class A{
		 *   	
		 *   
		 *   	// 메서드
		 *   	void disp(){//메서드 호출시에만 사용되므로 접근지정자 필요없음
		 *   
		 *   		// (3) 로컬 클래스- 접근지정자 사용 불가
		 *   		class D{
		 *   
		 *   			static 필드, 메서드 선언 불가
		 *   			나머지는 선언 가능
		 *   			D(){}
		 *   			int d1;
		 *   			void test(){
		 *   			}
		 *   
		 *   		}
		 *   
		 *   		D obj = new D();
		 *   		obj.d1;
		 *   		obj.test();
		 *   	
		 *   	}
		 *   	
		 *   	(1) 클래스 멤버로 선언(인스턴스 멤버)
		 *   	class B{
		 *   		
		 *   		B(){} //생성자
		 *   		int b1; //인스턴스필드
		 *   		void test(){} //인스턴스 메서드
		 *   
		 *   		// static필드, 메서드 선언은 불가
		 *   	}
		 *   
		 *   	예) A a = new A();       //1. 외부 객체 먼저 생성
		 *   		A.B b = a.new B();  //2. 내부객체 = 외부 객체.new();
		 *   		b.b1 =100;
		 *   		b.test();
		 *   
		 *   
		 *   	(2) 클래스 멤버로 선언(static 멤버)
		 *   	static class C{
		 *   		// 모든 필드와 메서드 선언 가능
		 *   		
		 *   		int c1 ; // 인스턴스 변수
		 *   		static sc1; //static 변수
		 *   		void test1(){} //인스턴스메서드
		 *   		static void test2(){} // static메서드
		 *   		C(){} // 생성자
		 *   
		 *   	}
		 *   	
		 *   	예) 외부 객체를 생성할 필요 없음
		 *   	A.C c = new A.C();
		 *   	c.c1 =100;
		 *   	c.test1();
		 *   
		 *   	A.C.sc1 = 100;
		 *   	A.C.test2();
		 *   }
		 *   	
		 */
		
		
	} // main

}//cl
